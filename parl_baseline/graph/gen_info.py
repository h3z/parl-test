from parl_baseline.graph.map_utils import *

# 常量部分
gen_p_a = [0.069663, 0.069663, 0.069663, 0.010875, 0.010875, 0.069663, 0.0128, 0.069663,
           0.069663, 0.010875, 0.003, 0.069663, 0.069663, 0.0128, 0.069663, 0.0128, 0.069663,
           0.069663, 0.0128, 0.002401, 0.002401, 0.0128, 0.0128, 0.0044, 0.0044, 0.0128,
           0.01059, 0.01059, 0.010875, 0.045923, 0.069663, 0.069663, 0.028302, 0.0128, 0.0128,
           0.010875, 0.0128, 0.069663, 0.003, 0.010875, 0.028302, 0.009774, 0.010875, 0.010875,
           0.010875, 0.028302, 0.0128, 0.0128, 0.028302, 0.009774, 0.0128, 0.0128, 0.0128,
           0.009774]
gen_p_b = [26.2438, 26.2438, 26.2438, 12.8875, 12.8875, 26.2438, 17.82, 26.2438, 26.2438,
           12.8875, 10.76, 26.2438, 26.2438, 17.82, 26.2438, 17.82, 26.2438, 26.2438, 17.82,
           12.3299, 12.3299, 17.82, 17.82, 13.29, 13.29, 17.82, 8.3391, 8.3391, 12.8875,
           15.4708, 26.2438, 26.2438, 37.6968, 17.82, 17.82, 12.8875, 17.82, 26.2438, 10.76,
           12.8875, 37.6968, 22.9423, 12.8875, 12.8875, 12.8875, 37.6968, 17.82, 17.82, 37.6968,
           22.9423, 17.82, 17.82, 17.82, 22.9423]
gen_p_c = [31.67, 31.67, 31.67, 6.78, 6.78, 31.67, 10.15, 31.67, 31.67, 6.78, 32.96,
           31.67, 31.67, 10.15, 31.67, 10.15, 31.67, 31.67, 10.15, 28, 28, 10.15, 10.15,
           39, 39, 10.15, 64.16, 64.16, 6.78, 74.33, 31.67, 31.67, 17.95, 10.15, 10.15, 6.78,
           10.15, 31.67, 32.96, 6.78, 17.95, 58.81, 6.78, 6.78, 6.78, 17.95, 10.15, 10.15,
           17.95, 58.81, 10.15, 10.15, 10.15, 58.81]
gen_p_d = [80, 80, 80, 880, 220, 80, 100, 80, 80, 200, 200, 80, 80, 100, 80, 100,
           80, 80, 118, 200, 200, 100, 100, 200, 200, 100, 500, 500, 200, 90, 80, 80, 60,
           100, 100, 880, 100, 80, 880, 800, 60, 90, 200, 200, 220, 60, 100, 100, 60, 90,
           100, 100, 100, 90]
# 5 新能源；1 火电；2 平衡机
gen_type = [5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 2, 1, 5, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 5]
gen_p_max = [80.0, 80.0, 52.0, 80.0, 48.0, 82.0, 40.0, 80.0, 40.0, 80.0, 80.0, 64.0,
             160.0, 40.0, 48.0, 124.0, 80.0, 350.0, 88.0, 96.0, 20.0, 136.0, 144.0, 240.0,
             120.0, 120.0, 140.0, 54.0, 80.0, 80.0, 140.0, 120.0, 140.0, 32.0, 132.0, 72.0,
             56.0, 140.0, 64.0, 128.0, 140.0, 140.0, 128.0, 80.0, 280.0, 140.0, 140.0, 52.0,
             132.0, 80.0, 60.0, 140.0, 140.0, 48.0]
gen_p_min = [0.0, 0.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 25.0, 16.0, 48.0, 18.0, 0.0, 4.0, 27.0, 29.0, 48.0, 24.0, 24.0, 28.0, 11.0,
             16.0, 0.0, 28.0, 24.0, 28.0, 6.0, 26.0, 15.0, 11.0, 28.0, 13.0, 25.0, 28.0, 28.0,
             25.0, 0.0, 56.0, 28.0, 28.0, 10.0, 26.0, 16.0, 12.0, 28.0, 28.0, 0.0]
gen_q_max = [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
             100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
             100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
             100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
             100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]
gen_q_min = [-180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0,
             -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0,
             -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0,
             -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0,
             -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0, -180.0,
             -180.0, -180.0, -180.0, -180.0, -180.0]
gen_v_max = [1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05,
             1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05,
             1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05,
             1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05,
             1.05, 1.05, 1.05]
gen_v_min = [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
             0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
             0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
             0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
             0.95, 0.95, 0.95]

gen_name_list = ['bus.119.gen', 'bus.4.gen', 'bus.6.gen', 'bus.8.gen', 'bus.10.gen', 'bus.12.gen',
                 'bus.15.gen', 'bus.18.gen', 'bus.19.gen', 'bus.24.gen', 'bus.25.gen', 'bus.26.gen', 'bus.120.gen',
                 'bus.31.gen', 'bus.32.gen', 'bus.34.gen', 'bus.36.gen', 'bus.40.gen', 'bus.42.gen', 'bus.46.gen',
                 'bus.49.gen', 'bus.121.gen', 'bus.55.gen', 'bus.56.gen', 'bus.122.gen', 'bus.61.gen', 'bus.62.gen',
                 'bus.65.gen', 'bus.66.gen', 'bus.69.gen', 'bus.70.gen', 'bus.72.gen', 'bus.73.gen', 'bus.74.gen',
                 'bus.76.gen', 'bus.77.gen', 'bus.80.gen', 'bus.85.gen', 'bus.87.gen', 'bus.89.gen', 'bus.90.gen',
                 'bus.91.gen', 'bus.92.gen', 'bus.99.gen', 'bus.100.gen', 'bus.103.gen', 'bus.104.gen', 'bus.105.gen',
                 'bus.123.gen', 'bus.110.gen', 'bus.111.gen', 'bus.124.gen', 'bus.113.gen', 'bus.116.gen']

obs_gen_name2id = {name: i for i, name in enumerate(gen_name_list)}
obs_renewable_gen_name2id = {name: i for i, name in
                             enumerate([gen for i, gen in enumerate(gen_name_list) if gen_type[i] == 5])}


def static_and_obs(obs):
    if True:
        assert (len(gen_p_a)) == 54
        assert (len(gen_p_b)) == 54
        assert (len(gen_p_c)) == 54
        assert (len(gen_p_d)) == 54
        assert (len(gen_type)) == 54
        assert (len(gen_p_max)) == 54
        assert (len(gen_p_min)) == 54
        assert (len(gen_q_max)) == 54
        assert (len(gen_q_min)) == 54
        assert (len(gen_v_max)) == 54
        assert (len(gen_v_min)) == 54

    from_obs_renewable = obs_map_to(obs, ['nextstep_renewable_gen_p_max', 'curstep_renewable_gen_p_max'],
                                    obs_renewable_gen_name2id)
    from_obs = obs_map_to(obs, ['gen_p', 'gen_q', 'gen_v', 'gen_status', 'actual_dispatch', 'steps_to_close_gen',
                                'steps_to_recover_gen', 'target_dispatch'], obs_gen_name2id)
    from_obs.update(from_obs_renewable)

    return {
        'obs': from_obs,
        'static': {
            # 下边是静态的
            'gen_p_a': map_to(gen_p_a, obs_gen_name2id),
            'gen_p_b': map_to(gen_p_b, obs_gen_name2id),
            'gen_p_c': map_to(gen_p_c, obs_gen_name2id),
            'gen_p_d': map_to(gen_p_d, obs_gen_name2id),
            'gen_type': map_to(gen_type, obs_gen_name2id),
            'gen_p_max': map_to(gen_p_max, obs_gen_name2id),
            'gen_p_min': map_to(gen_p_min, obs_gen_name2id),
            'gen_q_max': map_to(gen_q_max, obs_gen_name2id),
            'gen_q_min': map_to(gen_q_min, obs_gen_name2id),
            'gen_v_max': map_to(gen_v_max, obs_gen_name2id),
            'gen_v_min': map_to(gen_v_min, obs_gen_name2id),
        }
    }
